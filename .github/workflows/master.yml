name: Blue-Green Deployment

on:
  push:
    branches:
      - master
      - cd-test

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Login to Docker
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          docker build --platform amd64 --build-arg DEPENDENCY=build/dependency -t express-cicd:${{ github.sha }} .
          docker tag express-cicd:${{ github.sha }} la1av1a/express-cicd:${{ github.sha }}
          docker push la1av1a/express-cicd:${{ github.sha }}

      - name: Deploy to Blue or Green
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            BLUE_CONTAINER=$(docker ps -aqf "name=Blue")
            GREEN_CONTAINER=$(docker ps -aqf "name=Green")
            
            if [[ -z $BLUE_CONTAINER && -z $GREEN_CONTAINER ]]; then
              docker run -d --rm \
              -v /home/ec2-user/pinpoint-agent-2.5.1:/pinpoint-agent-2.5.1 \
              -v /etc/config/application-database.yml:/etc/config/application-database.yml \
              -v /etc/config/application-amazon.yml:/etc/config/application-amazon.yml \
              -v /etc/config/application-naver.yml:/etc/config/application-naver.yml \
              --name Blue -p 8080:8080 la1av1a/express-cicd:${{ github.sha }}
            
              # Nginx 설정 등 추가 작업이 필요하면 여기에 추가
            elif [[ ! -z $BLUE_CONTAINER ]]; then
              BLUE_PORT=$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort }}' $BLUE_CONTAINER)
              if [[ -z $BLUE_PORT ]]; then
                echo "Failed to get the port of Blue container."
                exit 1
              fi
            
              docker run -d --rm \
              -v /home/ec2-user/pinpoint-agent-2.5.1:/pinpoint-agent-2.5.1 \
              -v /etc/config/application-database.yml:/etc/config/application-database.yml \
              -v /etc/config/application-amazon.yml:/etc/config/application-amazon.yml \
              -v /etc/config/application-naver.yml:/etc/config/application-naver.yml \
              --name Green -p 8081:8080 la1av1a/express-cicd:${{ github.sha }}
            
              # Nginx 설정 등 추가 작업이 필요하면 여기에 추가
            
              docker stop $BLUE_CONTAINER
            elif [[ ! -z $GREEN_CONTAINER ]]; then
              GREEN_PORT=$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort }}' $GREEN_CONTAINER)
              if [[ -z $GREEN_PORT ]]; then
                echo "Failed to get the port of Green container."
                exit 1
              fi
            
              docker run -d --rm \
              -v /home/ec2-user/pinpoint-agent-2.5.1:/pinpoint-agent-2.5.1 \
              -v /etc/config/application-database.yml:/etc/config/application-database.yml \
              -v /etc/config/application-amazon.yml:/etc/config/application-amazon.yml \
              -v /etc/config/application-naver.yml:/etc/config/application-naver.yml \
              --name Blue -p 8080:8080 la1av1a/express-cicd:${{ github.sha }}
            
              # Nginx 설정 등 추가 작업이 필요하면 여기에 추가
            
              docker stop $GREEN_CONTAINER
            fi
